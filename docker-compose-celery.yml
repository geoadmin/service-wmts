version: "3.4"
services:
  wms-bod:
    image: swisstopo/mapserver-base:201806061459
    environment:
      - APACHE_PORT=80
      - MS_ERRORFILE=stderr
      - MS_DEBUGLEVEL=0
      - FCGID_IO_TIMEOUT=30
      - FCGID_BUSY_TIMEOUT=30
      - FCGID_BUSY_SCAN_INTERVAL=10
      - FCGID_IO_TIMEOUT=27
      - FCGID_BUSY_TIMEOUT=27
      - FCGID_BUSY_SCAN_INTERVAL=5
      - FCGID_MAX_PROCESSES=200
      - FCGID_MAX_REQUESTS_PER_PROCESS=1000
      - APACHE_LOG_LEVEL=debug
    ports:
      - 8000:80
  db:
    image: kartoza/postgis:12.0
    environment:
      - POSTGRES_DB=bod_local
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 15432:5432
    volumes:
      - type: bind
        source: ${PWD}/scripts/sql/init_local_db.sql
        target: /docker-entrypoint-initdb.d/setup-db.sql
  s3:
    image: minio/minio
    env_file: ./minio.env
    command: server /data
    volumes:
      - type: bind
        source: ${PWD}/.volumes/minio
        target: /data
    ports:
      - 9090:9000
  s3-client:
    image: minio/mc
    links:
      - s3
    env_file: ./minio.env
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
        set +o history;
        while ! echo > /dev/tcp/s3/9000;
        do
          echo waiting for minio;
          sleep 1;
        done;
        echo minio server is up;
        /usr/bin/mc alias set minio http://s3:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
        echo create bucket $${AWS_S3_BUCKET_NAME};
        /usr/bin/mc mb -p minio/$${AWS_S3_BUCKET_NAME};
        /usr/bin/mc policy set download minio/$${AWS_S3_BUCKET_NAME};
        exit 0;
      "
  rabbitmq:
    image: rabbitmq:3.8-management
    ports:
      - 5672:5672
      - 15672:15672
  celery-workers:
    image: "974517877189.dkr.ecr.eu-central-1.amazonaws.com/service-wmts:celery-workers-local"
    build:
      context: .
      target: unittest
    volumes:
      - type: bind
        source: "${PWD}/logs"
        target: /logs
    env_file:
      .env.local
    environment:
      BOD_DB_PORT: 5432
      BOD_DB_HOST: db
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      AWS_S3_ENDPOINT_URL: http://s3:9000
      LOGS_DIR: /logs
      LOGGING_CFG: /service-wmts/config/logging-cfg-local-celery-workers.yml
    entrypoint:
      - /scripts/wait-for-it.sh
      - db:5432
      - --
      - celery
      - -A
      - app.celery
      - worker
      - -P
      - gevent
      - --autoscale=17,8
      - --loglevel=debug
      - -E
    depends_on:
      - s3
      - rabbitmq
      - db
