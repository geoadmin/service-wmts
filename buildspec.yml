version: 0.2

env:
  variables:
    IMAGE_BASE_NAME: "service-wmts"
    REGISTRY: "974517877189.dkr.ecr.eu-central-1.amazonaws.com"
    SHELL: /bin/bash
    AWS_DEFAULT_REGION: eu-central-1
    USER: "aws_code_build"
    PIPENV_NOSPIN: 1

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - echo "Installing necessary dependencies"
      - apt-get update && apt-get install -y docker-compose python3-pip python3-venv pass gnupg2
      - echo "Install aws cli v2 for docker login to ECR registry"
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install
      - aws --version
      - echo "Login to AWS ECR docker registry"
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REGISTRY}
  pre_build:
    commands:
      - echo "Export of the image tag for build and push purposes"
      # Reading git branch (the utility in the deploy script is unable to read it automatically
      # on CodeBuild)
      # see https://stackoverflow.com/questions/47657423/get-github-git-branch-for-aws-codebuild
      - export GITHUB_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
      - |-
        if [ "${GITHUB_BRANCH}" = "" ] ; then
          GITHUB_BRANCH="$(git branch -a --contains HEAD | sed -n 2p | awk '{ printf $1 }')";
          export GITHUB_BRANCH=${GITHUB_BRANCH#remotes/origin/};
        fi
      - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export GIT_TAG="$(git describe --tags || echo 'no version info')"
      - echo "GITHUB_BRANCH=${GITHUB_BRANCH} COMMIT_HASH=${COMMIT_HASH} GIT_TAG=${GIT_TAG}"
      - echo "creating a clean environment"
      - make ci
      - echo "check code formatting"
      - make ci-check-format
      - echo "linting code"
      - make lint
      - echo "linting openapi spec"
      - make lint-spec

  build:
    commands:
      - |-
        if [ "${GIT_TAG}" = "undefined" ] ; then
          DOCKER_IMG_TAG="${REGISTRY}/${IMAGE_BASE_NAME}:${GITHUB_BRANCH}.${COMMIT_HASH}"
        else
          DOCKER_IMG_TAG="${REGISTRY}/${IMAGE_BASE_NAME}:${GIT_TAG}"
        fi
      - export DOCKER_IMG_TAG=${DOCKER_IMG_TAG}
      - export DOCKER_IMG_TAG_LATEST="${REGISTRY}/${IMAGE_BASE_NAME}:${GITHUB_BRANCH}.latest"
      # Starting dev build for testing
      - echo "starting build on $(date)"
      - echo "Building docker image with tags ${DOCKER_IMG_TAG} and ${DOCKER_IMG_TAG_LATEST}"
      - >
        docker build
        --build-arg GIT_HASH="${COMMIT_HASH}"
        --build-arg GIT_BRANCH="${GITHUB_BRANCH}"
        --build-arg AUTHOR="CI"
        --build-arg VERSION="${GIT_TAG}"
        -t "${DOCKER_IMG_TAG}" -t "${DOCKER_IMG_TAG_LATEST}" .
      # Running tests
      # Note: the app container will 'exit 0' once tests are completed, we need to
      # stop the db as well then
      - docker-compose -f docker-compose-ci.yml up --abort-on-container-exit

  post_build:
    commands:
      # Only push images built from develop and master to dockerhub
      - |
        if [ "${GITHUB_BRANCH}" = "master" ] || [ "${GITHUB_BRANCH}" = "develop" ]; then
          echo "Push production image ${DOCKER_IMG_TAG}"
          docker push ${DOCKER_IMG_TAG}
        fi
      # For develop aditionally push images with '*latest*' tags
      - |-
        if [ "${GITHUB_BRANCH}" = "develop" ]; then
          echo "Push production image ${DOCKER_IMG_TAG_LATEST}"
          docker push ${DOCKER_IMG_TAG_LATEST}
        fi
